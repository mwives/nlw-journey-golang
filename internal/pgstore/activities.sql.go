// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: activities.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities ("trip_id", "title", "occurs_at")
VALUES ($1, $2, $3)
RETURNING "id"
`

type CreateActivityParams struct {
	TripID   uuid.UUID
	Title    string
	OccursAt pgtype.Timestamp
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createActivity, arg.TripID, arg.Title, arg.OccursAt)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTripActivities = `-- name: GetTripActivities :many
SELECT "id",
  "trip_id",
  "title",
  "occurs_at"
FROM activities
WHERE "trip_id" = $1
`

func (q *Queries) GetTripActivities(ctx context.Context, tripID uuid.UUID) ([]Activity, error) {
	rows, err := q.db.Query(ctx, getTripActivities, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.TripID,
			&i.Title,
			&i.OccursAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
